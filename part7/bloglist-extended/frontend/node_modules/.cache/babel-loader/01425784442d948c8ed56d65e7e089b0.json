{"ast":null,"code":"var _jsxFileName = \"/Users/joshyee/Desktop/web-projects/fullstackopen-2022/part7/bloglist-extended/frontend/src/components/Toggable.js\",\n    _s = $RefreshSig$();\n\nimport { useState, forwardRef, useImperativeHandle } from 'react';\nimport PropTypes from 'prop-types';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Togglable = /*#__PURE__*/forwardRef(_c = _s((props, ref) => {\n  _s();\n\n  const [visible, setVisible] = useState(false);\n  const hideWhenVisible = {\n    display: visible ? 'none' : ''\n  };\n  const showWhenVisible = {\n    display: visible ? '' : 'none'\n  };\n\n  const toggleVisibility = () => {\n    setVisible(!visible);\n  };\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: hideWhenVisible,\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"viewButton\",\n        onClick: toggleVisibility,\n        children: props.buttonLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: showWhenVisible,\n      className: \"togglableHiddenContent\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVisibility,\n        children: props.closeLabel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), props.children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n}, \"7Y5lBLdF9mkfoiy3F9Lk5HPUzvA=\", false, function () {\n  return [useImperativeHandle];\n}));\n_c2 = Togglable;\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired,\n  closeLabel: PropTypes.string.isRequired\n};\nTogglable.displayName = 'Togglable';\nexport default Togglable;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Togglable$forwardRef\");\n$RefreshReg$(_c2, \"Togglable\");","map":{"version":3,"sources":["/Users/joshyee/Desktop/web-projects/fullstackopen-2022/part7/bloglist-extended/frontend/src/components/Toggable.js"],"names":["useState","forwardRef","useImperativeHandle","PropTypes","Togglable","props","ref","visible","setVisible","hideWhenVisible","display","showWhenVisible","toggleVisibility","buttonLabel","closeLabel","children","propTypes","string","isRequired","displayName"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,UAAnB,EAA+BC,mBAA/B,QAA0D,OAA1D;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAGA,MAAMC,SAAS,gBAAGH,UAAU,SAAC,CAACI,KAAD,EAAQC,GAAR,KAAgB;AAAA;;AAC3C,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBR,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMS,eAAe,GAAG;AAAEC,IAAAA,OAAO,EAAEH,OAAO,GAAG,MAAH,GAAY;AAA9B,GAAxB;AACA,QAAMI,eAAe,GAAG;AAAED,IAAAA,OAAO,EAAEH,OAAO,GAAG,EAAH,GAAQ;AAA1B,GAAxB;;AAIA,QAAMK,gBAAgB,GAAG,MAAM;AAC7BJ,IAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACD,GAFD;;AAIAL,EAAAA,mBAAmB,CAACI,GAAD,EAAM,MAAM;AAC7B,WAAO;AACLM,MAAAA;AADK,KAAP;AAGD,GAJkB,CAAnB;AAMA,sBACE;AAAA,4BAGE;AAAK,MAAA,KAAK,EAAEH,eAAZ;AAAA,6BACE;AAAQ,QAAA,SAAS,EAAC,YAAlB;AAA+B,QAAA,OAAO,EAAEG,gBAAxC;AAAA,kBAA2DP,KAAK,CAACQ;AAAjE;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAHF,eAOE;AAAK,MAAA,KAAK,EAAEF,eAAZ;AAA6B,MAAA,SAAS,EAAC,wBAAvC;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAEC,gBAAjB;AAAA,kBAAoCP,KAAK,CAACS;AAA1C;AAAA;AAAA;AAAA;AAAA,cADF,EAEGT,KAAK,CAACU,QAFT;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAgBD,CAlC2B;AAAA,UAY1Bb,mBAZ0B;AAAA,GAA5B;MAAME,S;AAoCNA,SAAS,CAACY,SAAV,GAAsB;AACpBH,EAAAA,WAAW,EAAEV,SAAS,CAACc,MAAV,CAAiBC,UADV;AAEpBJ,EAAAA,UAAU,EAAEX,SAAS,CAACc,MAAV,CAAiBC;AAFT,CAAtB;AAKAd,SAAS,CAACe,WAAV,GAAwB,WAAxB;AAGA,eAAef,SAAf","sourcesContent":["import { useState, forwardRef, useImperativeHandle } from 'react'\nimport PropTypes from 'prop-types'\n\n\nconst Togglable = forwardRef((props, ref) => {\n  const [visible, setVisible] = useState(false)\n\n  const hideWhenVisible = { display: visible ? 'none' : '' }\n  const showWhenVisible = { display: visible ? '' : 'none' }\n\n\n\n  const toggleVisibility = () => {\n    setVisible(!visible)\n  }\n\n  useImperativeHandle(ref, () => {\n    return {\n      toggleVisibility\n    }\n  })\n\n  return (\n    <div>\n\n\n      <div style={hideWhenVisible} >\n        <button className='viewButton' onClick={toggleVisibility}>{props.buttonLabel}</button>\n      </div>\n\n      <div style={showWhenVisible} className='togglableHiddenContent'>\n        <button onClick={toggleVisibility}>{props.closeLabel}</button>\n        {props.children}\n      </div>\n\n\n    </div>\n  )\n})\n\nTogglable.propTypes = {\n  buttonLabel: PropTypes.string.isRequired,\n  closeLabel: PropTypes.string.isRequired\n}\n\nTogglable.displayName = 'Togglable'\n\n\nexport default Togglable"]},"metadata":{},"sourceType":"module"}